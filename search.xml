<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Markdown进阶：时序图]]></title>
    <url>%2F2017%2F06%2F30%2Fflowchart%2F</url>
    <content type="text"><![CDATA[1、什么是时序图​ 时序图（Sequence Diagram），又名序列图、循序图、顺序图，是一种UML交互图。它通过描述对象之间发送消息的时间顺序显示多个对象之间的动态协作。它可以表示用例的行为顺序，当执行一个用例行为时，其中的每条消息对应一个类操作或状态机中引起转换的触发事件。​ 上面的是百度百科的解释，通俗地讲，时序图，就是描述各个对象之间，不同时间，不同对象之前的动作，或者说消息。2、时序图基础​ 常规的时序图由下面几个部分组成：​ 角色​ 系统角色，可以是人、及其甚至其他的系统或者子系统；​ 比如说，市民是一个角色，终端系统是一个角色。​ 对象​ 对象是某一类实例，比方说张三，POS机；​ 对象包括三种命名方式： 第一种方式包括对象名和类名； 第二中方式只显示类名不显示对象名，即表示他是一个匿名对象； 第三种方式只显示对象名不显示类名。 ​ 生命线​ 见文知意，一个对象的生命线就表示对象的存活时间，是一条垂直的虚线，消息在虚线之间传递。​ 控制焦点​ 在生命线中的某一个点，对象的动作，也就是某一时刻对象做了什么。​ 消息​ 在实体之间传递消息，就是不同的时刻，对象之间的消息交互。​ 在typora中，实现时序图是基于 js-sequence来实现的，主要可以看成有下面几部分组成：2.1 标题(title)​ 表示时序图的标题，语法如下：1title: 这是标题​ 示例如下：2.2 参与者(participant)​ 参与者，也就相当于一个对象实例，可以使用下面的语法来定义：12participant 对象Aparticipant 对象B​ 效果如下：2.3 消息(Note)​ 这里的消息，表示参与者在某时刻的动作，有三个位置可选择，左，中，右，语法如下：12participant 对象ANote left of 对象A: 这是左面的消息12participant 对象BNote over 对象B: 这是中间的消息12participant 对象CNote right of 对象C: 这是右面的消息2.4 动作(actor)​ 动作表示两个对象之间的交互，有两种格式：12对象A-&gt;对象B:How are you?对象B--&gt;&gt;对象A:Fine,and you?​ 一种是虚线，一种是实线。2.5 官方参考图3、时序图实例3.1 示例1​ 在画图的时候，有时候不用提前定义参与者，不过提前定义显得清晰。123456title: Alice and Bobparticipant Aliceparticipant BobAlice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks!3.2 示例212345678910Title: Here is a titleA-&gt;B: Normal line B--&gt;C: Dashed line C-&gt;&gt;D: Open arrow D--&gt;&gt;A: Dashed open arrowNote left of A: Note to the\n left of A Note right of A: Note to the\n right of A Note over A: Note over A Note over C,D: Note over both C and D3.3 示例31234567891011participant 客户端participant 服务器participant 通行证中心Note over 客户端: 用户输入通行证的账号、密码客户端-&gt;通行证中心: 发送账号、密码Note over 通行证中心: 验证账号、密码通行证中心--&gt;&gt;客户端: 返回token客户端-&gt;服务器: 发送token服务器-&gt;通行证中心: 验证token通行证中心--&gt;&gt;服务器: 验证成功服务器--&gt;&gt;客户端: 登陆成功title:这是标题{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}var code=document.getElementById("sequence-0-code").value,options=JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value)),diagram=Diagram.parse(code);diagram.drawSVG("sequence-0",options)participant 对象A participant 对象B{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}var code=document.getElementById("sequence-1-code").value,options=JSON.parse(decodeURIComponent(document.getElementById("sequence-1-options").value)),diagram=Diagram.parse(code);diagram.drawSVG("sequence-1",options)participant 对象A Note left of 对象A: 这是左面的消息{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}var code=document.getElementById("sequence-2-code").value,options=JSON.parse(decodeURIComponent(document.getElementById("sequence-2-options").value)),diagram=Diagram.parse(code);diagram.drawSVG("sequence-2",options)participant 对象B Note over 对象B: 这是中间的消息{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}var code=document.getElementById("sequence-3-code").value,options=JSON.parse(decodeURIComponent(document.getElementById("sequence-3-options").value)),diagram=Diagram.parse(code);diagram.drawSVG("sequence-3",options)participant 对象C Note right of 对象C: 这是右面的消息{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}var code=document.getElementById("sequence-4-code").value,options=JSON.parse(decodeURIComponent(document.getElementById("sequence-4-options").value)),diagram=Diagram.parse(code);diagram.drawSVG("sequence-4",options)对象A->对象B:How are you? 对象B-->>对象A:Fine,and you?{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}var code=document.getElementById("sequence-5-code").value,options=JSON.parse(decodeURIComponent(document.getElementById("sequence-5-options").value)),diagram=Diagram.parse(code);diagram.drawSVG("sequence-5",options)title: Alice and Bob participant Alice participant Bob Alice->Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob-->Alice: I am good thanks!{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}var code=document.getElementById("sequence-6-code").value,options=JSON.parse(decodeURIComponent(document.getElementById("sequence-6-options").value)),diagram=Diagram.parse(code);diagram.drawSVG("sequence-6",options)Title: Here is a title A->B: Normal line B-->C: Dashed line C->>D: Open arrow D-->>A: Dashed open arrow Note left of A: Note to the\n left of A Note right of A: Note to the\n right of A Note over A: Note over A Note over C,D: Note over both C and D{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}var code=document.getElementById("sequence-7-code").value,options=JSON.parse(decodeURIComponent(document.getElementById("sequence-7-options").value)),diagram=Diagram.parse(code);diagram.drawSVG("sequence-7",options)participant 客户端 participant 服务器 participant 通行证中心 Note over 客户端: 用户输入通行证的账号、密码 客户端->通行证中心: 发送账号、密码 Note over 通行证中心: 验证账号、密码 通行证中心-->>客户端: 返回token 客户端->服务器: 发送token 服务器->通行证中心: 验证token 通行证中心-->>服务器: 验证成功 服务器-->>客户端: 登陆成功{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}var code=document.getElementById("sequence-8-code").value,options=JSON.parse(decodeURIComponent(document.getElementById("sequence-8-options").value)),diagram=Diagram.parse(code);diagram.drawSVG("sequence-8",options)]]></content>
      <categories>
        <category>Markdown进阶</category>
      </categories>
      <tags>
        <tag>Markdown进阶</tag>
        <tag>时序图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git系列: gitignore]]></title>
    <url>%2F2017%2F06%2F18%2FGit--gitignore%2F</url>
    <content type="text"><![CDATA[1、什么是 gitignore​ git是一个版本控制工具，不过在工作目录中，并不是所有的文件都是需要做版本控制的，比如说编译产生的字节码文件，这种文件是不需要做版本管理，也不需要上传到github中的，但是我们又不想每次上传的时候手动删除这些文件，于是就有了gitignore文件，记录在文件中每一行都是一个规则，git根据这个规则，决定哪些文件做版本控制，这样我们就可以选择性的决定哪些文件做版本控制。2、gitignore的语法标识描述空白行不匹配文件#表示注释\转义字符，如果在#前面放,则表示一个字符，而非注释\空格转义空格！表示不匹配的规则，也就是此规则下的文件将会被追踪\!放在开头表示转义！，仅表示！字符?匹配单个字符*匹配任意多个字符**匹配任意目录深度[123]匹配其中的一个字符[1-9]匹配1到9中的一个3、gitignore实例​ 当文件或文件夹匹配到gitignore文件中的规则时，git将不会对这些文件/文件夹进行版本管理。3.1 空文件夹​ 默认空文件夹不会被匹配3.2 全局文件／文件夹匹配1abc​ 会匹配工作空间中所有名为abc的文件和文件夹1abc/​ 匹配全局所有的名为abc的文件夹，但是名为abc的文件不会被匹配到1*abc​ 匹配全局所有的末尾字符为abc的文件和文件夹1*abc/​ 匹配全局所有的末尾字符为abc的文件夹1**/abc​ 匹配全局所有的名为abc的文件和文件夹1**/abc/​ 匹配全局所有的名为abc的文件夹1**/a[bc]/​ 匹配全局所有的名为ab, ac的文件夹3.3 局部匹配1/abc​ 匹配项目根目录名为abc的文件和文件夹1/abc/​ 匹配项目根目录名为abc的文件夹12/abc/*/abc/**​ 匹配abc目录下所有文件和文件夹1abc/bcd​ 匹配根目录中abc目录下名为bcd的文件和文件夹1abc/bcd／​ 匹配根目录中abc目录下名为bcd的文件夹1a/**/b​ 匹配全局所有的形式如上的文件和文件夹，例如a/f/b, a/y/b/1a/**/b/​ 匹配全局所有的形式如上的文件夹，文件会忽略1/a/**/b​ 从根目录开始，先匹配根目录下的文件夹a，然后匹配全局所有的形式如上的文件和文件夹，例如a/f/b, /a/y/b/1/a/**/b/​ 从根目录开始，先匹配根目录下的文件夹a，然后匹配全局所有的形式如上的文件夹，例如a/f/b, /a/y/b/3.4 带空格的文件名与路径匹配​ 如果一个文件文件名中带有空格，需要使用\转义1\space+文件名​ 路径同理3.5 不匹配规则​ 上面的规则，如果前面加上!，则表示哪些文件或文件夹需要被git进行版本管理，常见的用法如下：12/abc/**!/abc/name.txt​ 第一句，我们将/abc下的所有文件匹配到，git将忽略这些文件、文件夹，不过第二句表示git将会对/abc/name.txt文件进行版本管理。​ 特别注意：git读取规则的时候是从上往下的，所以说，忽略匹配一定要在匹配规则之后才会生效！4、相关资料与链接git官方解释文档 : gitignorepro git 中文版: Pro Git v2git官方实例文件: github官方实例]]></content>
      <categories>
        <category>Git文档</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>gitignore</tag>
        <tag>git系列</tag>
      </tags>
  </entry>
</search>